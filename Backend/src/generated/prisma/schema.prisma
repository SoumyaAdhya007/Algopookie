generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum PlanType {
  FREE
  PRO
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  isBlocked Boolean  @default(false)

  // Email verification
  isEmailVerified          Boolean   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?

  // Subscription plan (FREE or PRO)
  plan                PlanType  @default(FREE)
  subscriptionExpires DateTime?

  // For daily-streak tracking 
  lastActivityDate DateTime?
  currentStreak    Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems             Problem[]
  submission           Submission[]
  problemSolved        ProblemSolved[]
  playlists            Playlist[]
  dailyActivities      UserDailyActivity[]
  contestRegistrations ContestRegistration[]
  contestSubmissions   ContestSubmission[]
  contestsCreated      Contest[]             @relation("ContestCreator")
  contest              Contest[]
}

model UserDailyActivity {
  id     String   @id @default(uuid())
  userId String
  date   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATION
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[] //["tag1","tag2","tag3"]
  companies          String[] //["google","meta","microsoft"]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorials         String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // RELATION
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  submission        Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemsInPlaylist[]
  contestProblems   ContestProblem[]
}

model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // RELATIONS
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases         TestCaseResult[]
  contestSubmission ContestSubmission?
}

model TestCaseResult {
  id            String   @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // RELATION
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublic    Boolean  @default(false)

  problems ProblemsInPlaylist[]

  // RELATION
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ProblemsInPlaylist {
  id         String   @id @default(uuid())
  playlistId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // RELATIONS
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

model Contest {
  id          String   @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdBy   String // userId of the admin who created it
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  creator User @relation("ContestCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  problems           ContestProblem[]
  registrations      ContestRegistration[]
  contestSubmissions ContestSubmission[]
  User               User?                 @relation(fields: [userId], references: [id])
  userId             String?
}

model ContestProblem {
  id        String   @id @default(uuid())
  contestId String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([contestId, problemId])
}

model ContestRegistration {
  id        String   @id @default(uuid())
  userId    String
  contestId String
  joinedAt  DateTime @default(now())

  // RELATIONS
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
}

model ContestSubmission {
  id           String   @id @default(uuid())
  contestId    String
  submissionId String   @unique
  createdAt    DateTime @default(now())

  // RELATIONS
  contest    Contest    @relation(fields: [contestId], references: [id], onDelete: Cascade)
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?

  @@index([contestId])
}
